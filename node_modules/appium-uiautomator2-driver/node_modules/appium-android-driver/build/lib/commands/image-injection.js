"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mobileInjectEmulatorCameraImage = void 0;
const driver_1 = require("appium/driver");
const node_path_1 = __importDefault(require("node:path"));
const support_1 = require("@appium/support");
const node_crypto_1 = __importDefault(require("node:crypto"));
const lodash_1 = __importDefault(require("lodash"));
const EMULATOR_RESOURCES_ROOT = ['emulator', 'resources'];
const CONFIG_NAME = 'Toren1BD.posters';
const CONFIG = `poster wall
size 2 2
position -0.807 0.320 5.316
rotation 0 -150 0
default poster.png

poster table
size 1 1
position 0 0 -1.5
rotation 0 0 0
`;
const PNG_MAGIC = '89504e47';
const PNG_MAGIC_LENGTH = 4;
/**
 * Updates the emulator configuration to show the given
 * image on the foreground when one opens the Camera app.
 * It is expected that the rear camera of the emulator is
 * configured to show VirtualScene for this feature to work.
 *
 * @this {AndroidDriver}
 * @param {import('./types').ImageInjectionOpts} opts
 * @returns {Promise<void>}
 */
async function mobileInjectEmulatorCameraImage(opts) {
    if (!this.isEmulator()) {
        throw new Error('The image injection feature is only available on emulators');
    }
    const { payload } = opts;
    if (!lodash_1.default.isString(payload) || lodash_1.default.size(payload) <= PNG_MAGIC_LENGTH) {
        throw new driver_1.errors.InvalidArgumentError(`You must provide a valid base64-encoded .PNG data as the 'payload' argument`);
    }
    const pngBuffer = Buffer.from(payload, 'base64');
    const magic = pngBuffer.toString('hex', 0, PNG_MAGIC_LENGTH);
    if (magic !== PNG_MAGIC) {
        throw new driver_1.errors.InvalidArgumentError('The provided image payload must contain a valid base64-encoded .PNG data');
    }
    const sdkRoot = /** @type {string} */ (this.adb.sdkRoot);
    const destinationFolder = node_path_1.default.resolve(sdkRoot, ...EMULATOR_RESOURCES_ROOT);
    await support_1.fs.writeFile(node_path_1.default.resolve(destinationFolder, CONFIG_NAME), CONFIG, 'utf-8');
    const tmpImagePath = await support_1.tempDir.path({
        // this is needed to avoid creation of multiple temp files for the same image payload
        prefix: calculateImageHash(pngBuffer),
        suffix: '.png',
    });
    await support_1.fs.writeFile(tmpImagePath, pngBuffer);
    await this.adb.execEmuConsoleCommand(`virtualscene-image table ${tmpImagePath}`);
    this.log.info(`The provided image has been successully injected to the ${this.adb.curDeviceId} emulator`);
}
exports.mobileInjectEmulatorCameraImage = mobileInjectEmulatorCameraImage;
// #region Internal helpers
/**
 *
 * @param {Buffer} buffer
 * @returns {string}
 */
function calculateImageHash(buffer) {
    const hasher = node_crypto_1.default.createHash('sha1');
    hasher.update(buffer);
    return hasher.digest('hex');
}
// #endregion
/**
 * @typedef {import('appium-adb').ADB} ADB
 * @typedef {import('../driver').AndroidDriver} AndroidDriver
 */
//# sourceMappingURL=image-injection.js.map